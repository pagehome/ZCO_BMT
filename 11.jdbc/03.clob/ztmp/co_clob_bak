import java.sql.*;
import com.cubeone.CubeOneAPI;
import java.text.*;
import java.util.*;


import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.IOException;

public class co_clob
{

/*
    // Oracle
    static String strUrl = "jdbc:oracle:thin:@192.168.1.213:1522:ORA12"; // URL
    static String strDriver = "oracle.jdbc.driver.OracleDriver";
    static String strId = "scott";
    static String strPass = "tiger";

    // Tibero
    static String strUrl = "jdbc:tibero:thin:@192.168.1.70:8629:tibero"; // URL
    static String strDriver = "com.tmax.tibero.jdbc.TbDriver";
    static String strId = "test";
    static String strPass = "test";
*/
    static String strUrl = "jdbc:oracle:thin:@192.168.1.213:1521:ORA11"; // URL
    static String strDriver = "oracle.jdbc.driver.OracleDriver";
    static String strId = "scott";
    static String strPass = "tiger";


    static Connection conn = null;
    static PreparedStatement pstmt = null;
    static ResultSet rs = null;

    static byte[] errbyte = new byte[5];
    static String item = "AES256";

    public static void main(String[] args) {

        System.out.println("################################################");
        System.out.println("###### CubeOne API SelfTest : JDBC TEST ########");
        System.out.println("################################################\n");

/*
        if(args.length == 0) {
            System.out.println("Input TableName and ItemName");    
        }

        String table = args[0];
        String item  = args[1]; 

        System.out.println("<<< CubeLog :: table = [" + table + "]");
        System.out.println("<<< CubeLog :: item = [" + item + "]"); 
*/

        System.out.println("<<< CubeLog :: [strUrl][id/pass] = [" + strUrl + "][" + strId + "/" + strPass + "]"); 
        System.out.println("<<< CubeLog :: DB connection waiting ...."); 

        try{
            Class.forName(strDriver); // Load Jdbc Driver
            conn = DriverManager.getConnection(strUrl, strId, strPass); // Connect DB
            System.out.println("<<< CubeLog :: DB connection completed .... \n\n"); 

            //insertClob();
            selectClob();

        } catch (Exception e) {
            System.out.println("<<< CubeLog :: Exception ############################################################");
            System.out.println("msg = [" + e.getMessage() + "]");

            e.printStackTrace();
        } finally {
            try {
                rs.close();
                pstmt.close();
                conn.close();
            } catch (Exception e) {
                // ignored ..       
                System.out.println("<<< CubeLog :: Finally ############################################################");
                //System.out.println("msg = [" + e.getMessage() + "]");
                e.printStackTrace();
            }
        }
    }

    static void selectClob() throws Exception {

      
	InputStream in = null;
		byte[] buffer;
		int count = 0;
		byte[]  encblob;

	String pkcol, plnClob, plnLen, encClob, encLen; 
        //String sql = "SELECT PKCOL, PLN_CLOB, PLN_LEGTH, ENC_CLOB, ENC_LEGTH FROM zcube_clob1 ORDER BY PKCOL";
        //String sql = "SELECT PKCOL, PLN_CLOB, PLN_LEGTH, ENC_CLOB, ENC_LEGTH FROM zcube_clob ORDER BY PKCOL";
        String sql = "SELECT COL_BLOB FROM test03_01_01# ";

        // bytePln = plain.getBytes("EUC-KR");
        // System.out.println("<<< CubeLog :: bytePln.length =  " + bytePln.length);
        // encrypt = CubeOneAPI.coencbytes(bytePln, bytePln.length, item, 11, null, null, errbyte);

        // encrypt = CubeOneAPI.coencchar(plain, item, 10, null, null, errbyte);

		pstmt = conn.prepareStatement(sql);
		rs = pstmt.executeQuery();

        while(rs.next()){
		/*
            pkcol = rs.getString("PKCOL");
            plnClob = rs.getString("PLN_CLOB");
            plnLen = rs.getString("PLN_LEGTH");
            encClob = rs.getString("ENC_CLOB");
            encLen = rs.getString("ENC_LEGTH");
		*/
            //encClob = rs.getString("COL_BLOB");
		oracle.sql.BLOB blob = (oracle.sql.BLOB)rs.getBlob("COL_BLOB"); 
					System.out.println("blob=["+blob+"]");
				buffer = new byte[(int) blob.length()];
				in = blob.getBinaryStream();
				while(true) {
					count = in.read(buffer);
					if(count == -1)
						break;
					System.out.println("blob=["+new String(buffer)+"]");
					encblob = CubeOneAPI.codecbyte(new String(buffer),"AES128",10,"","",errbyte);
					System.out.println("encblob=["+new String(encblob)+"]");
					System.out.println("errcode=["+new String(errbyte)+"]");
					//fos.write(encblob,0,encblob.length);
				}	

			//System.out.println(plnClob);
			//System.out.println(plnClob.length());

                System.out.println("<<< encclob ############################################################");
			//System.out.println(encClob);
                System.out.println("<<< encclob end ############################################################");
			//System.out.println(encClob.length());

                System.out.println("<<< dec ############################################################");
			//System.out.println(encClob);
			//System.out.println(CubeOneAPI.codecchar(encClob,item, 11, null, null, errbyte));
			//String decval = CubeOneAPI.codecchar(encClob,item, 11, null, null, errbyte);
			//System.out.println("decval len=["+decval.length()+"]");
                System.out.println("<<< dec end ############################################################");

        }
        

        System.out.println("--------------------------------------------------------------------------------------------------------------\n\n");
    }

    static void insertClob() throws Exception {

        StringBuffer lob = new StringBuffer();
        String plain, encrypt ;
        byte[] bytePln, byteEnc ; 

        // for(int i=0; i<500000; i++) { // ORACLE
        for(int i=0; i<1000; i++) {
            lob.append(i);
            lob.append("twinkle twinkle little star, How I wonder what you are, up above the world so high, like a diamond in the sky,twinkle twinkle little star, How I wonder what you are\n");
            // lob.append("반짝 반짝 작은 별  아름답게 비추네 서쪽 하늘에서도  동쪽 하늘에서도  반짝 반짝 작은 별 아름답게 비추네\n");
        };

        plain = lob.toString(); 

        System.out.println("<<< CubeLog :: lob.capacity() =  " + lob.capacity());
        System.out.println("<<< CubeLog :: plain.length() =  " + plain.length());

        // bytePln = plain.getBytes("EUC-KR");
        // System.out.println("<<< CubeLog :: bytePln.length =  " + bytePln.length);
        // encrypt = CubeOneAPI.coencbytes(bytePln, bytePln.length, item, 11, null, null, errbyte);

        encrypt = CubeOneAPI.coencchar(plain, item, 10, null, null, errbyte);

        System.out.println("<<< [1] Insert CLOB Table :: ================== " );

        String sql = "INSERT INTO zcube_clob VALUES((SELECT NVL(MAX(pkcol)+1,1) FROM zcube_clob),?,?,?,?,?)" ;
        System.out.println(" - sql = [" + sql + "]");
        
        pstmt = conn.prepareStatement(sql);        

        pstmt.setString(1,"encrypt");
        pstmt.setString(2,plain);
        pstmt.setInt   (3,plain.length()); 
        pstmt.setString(4,encrypt);
        pstmt.setInt   (5,encrypt.length());

        pstmt.executeUpdate();

        System.out.println("--------------------------------------------------------------------------------------------------------------\n\n");
    }
}
