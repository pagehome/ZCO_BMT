#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/timeb.h>
#include <string.h>
#include <sqlca.h>

#include <pthread.h>

/* Function prototypes */
void err_report();
void do_transaction();

void get_transaction();
void logon();
void logoff();

#define CONNINFO "scott/tiger"
#define THREADS 4

struct parameters
{ 
	sql_context *ctx;
	int thread_id;
};
typedef struct parameters parameters;

struct record_log
{ 
	char action;
	unsigned int from_account;
	unsigned int to_account;
	float amount;
};
typedef struct record_log record_log;

record_log records[]= { 
	{ 'M', 10001, 10002, 12.50 },
	{ 'M', 10001, 10003, 25.00 },
	{ 'M', 10001, 10003, 123.00 },
	{ 'M', 10001, 10003, 125.00 },
	{ 'M', 10002, 10006, 12.23 },
	{ 'M', 10007, 10008, 225.23 },
	{ 'M', 10002, 10008, 0.70 },
	{ 'M', 10001, 10003, 11.30 },
	{ 'M', 10003, 10002, 47.50 },
	{ 'M', 10002, 10006, 125.00 },
	{ 'M', 10007, 10008, 225.00 },
	{ 'M', 10002, 10008, 0.70 },
	{ 'M', 10001, 10003, 11.00 },
	{ 'M', 10003, 10002, 47.50 },
	{ 'M', 10002, 10006, 125.00 },
	{ 'M', 10007, 10008, 225.00 },
	{ 'M', 10002, 10008, 0.70 },
	{ 'M', 10001, 10003, 11.00 },
	{ 'M', 10003, 10002, 47.50 },
	{ 'M', 10008, 10001, 1034.54}};

static unsigned int trx_nr=0;

pthread_mutex_t mutex;

int main(int argc, char *argv[])
{

    printf("################################################\n");
    printf("###### CubeOne PlugIn Pro*C Thread Test  #######\n");
    printf("################################################\n\n");

	sql_context ctx[THREADS];

	pthread_t thread_id[THREADS];
	pthread_attr_t status;

	parameters params[THREADS];
	int i;

	EXEC SQL ENABLE THREADS;
	EXEC SQL WHENEVER SQLERROR DO err_report(sqlca);

	for(i=0;i<THREADS;i++)
	{
		printf("Start Session %d....",i);
		EXEC SQL CONTEXT ALLOCATE :ctx[i];
		logon(ctx[i],CONNINFO);
	}

	if (pthread_mutex_init(&mutex,NULL))
 	{
		printf("Can't initialize mutex\n");
 		exit(1);
	}

	/*Spawn threads*/
	for(i=0;i<THREADS;i++)
	{
		params[i].ctx=ctx[i];
		params[i].thread_id=i;
		printf("Thread %d... \n",i);
		if (pthread_create(&thread_id[i], NULL, do_transaction, &params[i]))
			printf("Cant create thread %d\n",i);
		else
			printf("Created\n");
	}


	// log off ...
	for(i=0;i<THREADS;i++)
	{
		/*wait for thread to end */
		printf("Thread %d ....",i);
		if (pthread_join(thread_id[i],&status))
			printf("Error when waiting for thread % to terminate\n", i);
		else
			printf("stopped\n");

		printf("Detach thread...");

		if (pthread_detach(&thread_id[i]))
			printf("Error detaching thread! \n");
		else
			printf("Detached!\n");

		printf("Stop Session %d....",i);
		logoff(ctx[i]);
		EXEC SQL CONTEXT FREE :ctx[i];
	}

	/*Destroys mutex*/
	if (pthread_mutex_destroy(&mutex))
	{
		printf("Can't destroy mutex\n");
		exit(1);
	}
}

/*****************************************************************
 * Function: err_report
 *
 * Description: This routine prints out the most recent error
 *
 ****************************************************************/
void err_report(sqlca)
struct sqlca sqlca;
{
	if (sqlca.sqlcode < 0)
	printf("\n%.*s\n\n",sqlca.sqlerrm.sqlerrml,sqlca.sqlerrm.sqlerrmc); 
	exit(1);
}

void do_transaction(params)
parameters *params;
{
	printf ("<<< do_transaction() :: start !!!!!\n" );

	struct sqlca sqlca;
	record_log *trx;
	sql_context ctx=params->ctx;

	// Done all transactions 
	get_transaction(&trx);

	EXEC SQL WHENEVER SQLERROR DO err_report(sqlca);
	EXEC SQL CONTEXT USE :ctx;

	printf("Thread %d executing transaction\n",params->thread_id);
	printf("trx->action : %c\n", trx->action);

	EXEC SQL BEGIN DECLARE SECTION;
	        VARCHAR dec[100+1];
	EXEC SQL END DECLARE SECTION;

	printf ("<<< do_transaction() :: step-1   \n" );

	/*****************************************************************/
	EXEC SQL
	    DECLARE  C1 CURSOR  FOR
	    select xx1.dec_varchar2_sel(jumin_no,11,'ARIA256') from cube_test01#  ;
	    //select jumin_no from cube_test01# ;

	printf ("<<< do_transaction() :: step-2   \n" );

	EXEC SQL OPEN C1   ;

	printf ("<<< do_transaction() :: step-3   \n" );

	EXEC SQL WHENEVER NOT FOUND DO break;
	while(1)
	{
	    memset(&dec, 0x00, sizeof(dec));

	    EXEC SQL FETCH C1 INTO
	        :dec ;

	    if (sqlca.sqlcode != 0) {
	        printf("<<< CubeLog :: selectEncTable() : sqlca.sqlcode = [%d]\n", sqlca.sqlcode);
	        printf("<<< CubeLog :: selectEncTable() : %s\n", sqlca.sqlerrm.sqlerrmc);
	        exit(-1);
	    }

	    printf (" - dec = [%s]\n" , dec.arr);
	}

	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL CLOSE C1;

	EXEC SQL COMMIT;

	printf ("<<< do_transaction() :: end !!!!!\n" );
}


void get_transaction(trx)
record_log ** trx;
{
	if (pthread_mutex_lock(&mutex))
		printf("Can't lock mutex\n");

	*trx=&records[trx_nr];
	trx_nr++;

	if (pthread_mutex_unlock(&mutex))
		printf("Can't unlock mutex\n");
}



void logon(ctx,connect_info)
sql_context ctx;
char * connect_info;
{
	EXEC SQL WHENEVER SQLERROR DO err_report(sqlca);
	EXEC SQL CONTEXT USE :ctx;
	EXEC SQL CONNECT :connect_info;
	printf("Connected!\n");
}

void logoff(ctx)
sql_context ctx;
{
	EXEC SQL WHENEVER SQLERROR DO err_report(sqlca);
	EXEC SQL CONTEXT USE :ctx;
	EXEC SQL COMMIT WORK RELEASE;
	printf("Logged off!\n");
}


