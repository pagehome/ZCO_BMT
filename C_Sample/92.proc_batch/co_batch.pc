#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/timeb.h>
#include <string.h>

#include "coapi_user.h" 
/*EXEC SQL INCLUDE coapi_user;*/

EXEC SQL INCLUDE SQLCA;

char sDecOut[2000];
unsigned char sEncOut[2000];
char *sItem = "AES256";

int nDecLen, nEncLen, nRtn;
int totalRec = 88888;

#define ARRAY_LENGTH 20000


//void targetUpdArray();
//void targetDelArray();

void encInsArr();
void encInsOne();
void decSelOne();
void plnSelOne();

void sql_error(char *routine)
{
    char message_buffer[512];
    size_t buffer_size;
    size_t message_length;

    /* Turn off the call to sql_error() to avoid a possible infinite loop */
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    printf("\nOracle error while executing %s!\n", routine);

    /* Use sqlglm() to get the full text of the error message. */
    buffer_size = sizeof(message_buffer);
    sqlglm(message_buffer, &buffer_size, &message_length);
    printf("%ld.%s\n", message_length, message_buffer);

    EXEC SQL ROLLBACK WORK RELEASE;

    exit(1);
}

int main(int argc, char *argv[])
{

    printf("################################################\n");
    printf("###### CubeOne API SelfTest : PRO*C TEST #######\n");
    printf("################################################\n\n");

    /* Connect to DB */
    EXEC SQL BEGIN DECLARE SECTION;
        char userid[40]= "scott/one123@VM_19";
    EXEC SQL END DECLARE SECTION;

    printf("<<< CubeLog :: id/pass = [%s]\n", userid);
    printf("<<< CubeLog :: totalRec = [%d]\n", totalRec);
    printf("<<< CubeLog :: ARRAY_LENGTH = [%d]\n\n", ARRAY_LENGTH);

    EXEC SQL CONNECT :userid;

    if (sqlca.sqlcode < 0)
    {
        printf("<<< CubeLog :: %s\n", sqlca.sqlerrm.sqlerrmc);
        EXEC SQL ROLLBACK WORK RELEASE;
        exit(0);
    }

    // nRtn = CO_init_api ("ORCL");

    if (nRtn != CTR_SUCCESS) {
        printf("<<< CubeLog :: CO_init failed. returned %d\n", nRtn);
        exit(1);
    }

    encInsArr();
    //decSelOne();
    //plnSelOne();

    EXEC SQL COMMIT WORK RELEASE;
    return 0;
}

void encInsArr() {

    int nRownum = 0;
	int i;

	printf("************************************************\n");
	printf("****** CubeOneAPI Encrypt Array Insert  ********\n");
	printf("************************************************\n\n");

    EXEC SQL WHENEVER SQLERROR DO sql_error("<<< call : sql_error => targetInsLoop");

    EXEC SQL BEGIN DECLARE SECTION;
        long seq[ARRAY_LENGTH];
        VARCHAR writer[ARRAY_LENGTH][20+1];
        VARCHAR regno[ARRAY_LENGTH][13+1];
        VARCHAR regno_enc[ARRAY_LENGTH][24+1];
        VARCHAR subject[ARRAY_LENGTH][20+1];
        //VARCHAR crdate[ARRAY_LENGTH][40+1];
        VARCHAR crdate[ARRAY_LENGTH][60+1];
    EXEC SQL END DECLARE SECTION;

    EXEC SQL DECLARE c_array CURSOR FOR
        SELECT seq, writer, regno, subject, to_char(crdate, 'YYYY-MM-DD fmHH24fm:MI:SS') crdate
        FROM zcube_zsource;

    EXEC SQL OPEN c_array;

    EXEC SQL WHENEVER NOT FOUND DO break;

	// Treat Page 
	int rows_to_fetch, rows_before;

	rows_to_fetch = ARRAY_LENGTH; 
	rows_before = 0; 

    while(rows_to_fetch>0)
    {

    	printf ("<<< CubeLog :: =====================================================\n");

        EXEC SQL FOR :rows_to_fetch
		FETCH c_array INTO
            :seq,
            :writer,
            :regno,
            :subject,
			:crdate;

    	printf ("<<< CubeLog :: after select(sqlca.sqlerrd[2]) = [%d] cnt\n" , sqlca.sqlerrd[2]);

		rows_before = sqlca.sqlerrd[2];
    	//printf ("<<< CubeLog :: rows_before = [%d] cnt\n" , rows_before );

		for(i=0; i<rows_to_fetch; i++) {
			//CO_enc_char((char *)regno[i].arr, sItem, 10, NULL, NULL, regno_enc[i].arr, regno_enc[i].len);

			CO_enc_char((char *)regno[i].arr, sItem, 10, NULL, NULL, regno_enc[i].arr, &nEncLen);
			regno_enc[i].len = nEncLen;

        	if (nRtn == CTR_SUCCESS) {
            	//printf ("<<< CubeLog :: strlen(encrypt) = %s, %ld,%d \n" , regno_enc[i].arr, strlen((char *)regno_enc[i].arr), nEncLen ); 
        	}
        	else {
            	printf("<<< CubeLog :: insertEncTable() : Failed Encryption data with return [%d].\n",nRtn);
        	}
		}

        EXEC SQL FOR :rows_to_fetch
			INSERT INTO zcube_ztarget(seq, writer, regno, subject, crdate) VALUES(:seq, :writer, :regno_enc, :subject, to_date(:crdate,'YYYY-MM-DD fmHH24fm:MI:SS'));
        EXEC SQL COMMIT WORK;

    	//printf ("<<< CubeLog :: after insert(sqlca.sqlerrd[2])  = [%d] cnt\n" , sqlca.sqlerrd[2]);

		if(totalRec-rows_before < ARRAY_LENGTH) {
			rows_to_fetch = totalRec-rows_before;
    		printf ("<<< CubeLog :: **rows_to_fetch** = [%d] cnt\n" , rows_to_fetch );
		}
    }

   	printf ("<<< CubeLog :: *****************************************************\n");
    printf ("<<< CubeLog :: last(sqlca.sqlerrd[2]) = [%d] cnt\n" , sqlca.sqlerrd[2]);

    
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL CLOSE c_array;
}

void encInsOne() {

    int nRownum = 0;

    printf ("<<< [3] targetInsLoop \n" );
    
    EXEC SQL WHENEVER SQLERROR DO sql_error("<<< call : sql_error => targetInsLoop");

    EXEC SQL BEGIN DECLARE SECTION;
        VARCHAR writer[20+1];
        VARCHAR regno[13+1];
        VARCHAR subject[20+1];
        long seq;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL DECLARE C1 CURSOR FOR
        SELECT seq, writer, regno, subject  
        FROM zcube_ztarget
        ORDER BY seq DESC ;

    EXEC SQL OPEN C1;

    printf ("---------------------------------------------------------------------------------------------\n");
    printf ("|%10s|%-15s|%-15s|%-15s|\n" , "Seq", "Writer", "Regno", "Subject" );
    printf ("---------------------------------------------------------------------------------------------\n");

    EXEC SQL WHENEVER NOT FOUND DO break;
    while(1)
    {

        EXEC SQL FETCH C1 INTO
            :seq,
            :writer,
            :regno,
            :subject;

        if (sqlca.sqlcode != 0) {
            printf("<<< CubeLog(!0) :: sqlca.sqlcode = [%d]\n", sqlca.sqlcode);
            printf("<<< CubeLog(!0) :: %s\n", sqlca.sqlerrm.sqlerrmc);
            EXEC SQL CLOSE C1;
            exit(-1);
        }

        if(++nRownum%1000 == 10) break;    


        CO_enc_char((char *)regno.arr, sItem,10,NULL,NULL,sEncOut,&nEncLen);
        if (nRtn == CTR_SUCCESS) {
            // printf ("<<< CubeLog :: strlen(encrypt) = %d,%d \n" , strlen(sEncOut), nEncLen ); 
        }
        else {
            printf("<<< CubeLog :: insertEncTable() : Failed Encryption data with return [%d].\n",nRtn);
        }

        printf ("|%ld||%s|%s|%s|\n" , seq, writer.arr, regno.arr, subject.arr);

        EXEC SQL INSERT INTO zcube_ztarget(seq, writer, regno, subject) VALUES(:seq, :writer, :sEncOut, :subject);
        EXEC SQL COMMIT WORK;

    }

    printf ("--------------------------------------------------------------------------------------------\n\n\n");
    
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL CLOSE C1;

}


void plnSelOne() {

    printf("************************************************\n");
    printf("****** CubeOneAPI Plain One Select  ************\n");
    printf("************************************************\n\n");

    int nRownum = 0;

    EXEC SQL WHENEVER SQLERROR DO sql_error("<<< call : sql_error => targetInsLoop");

    EXEC SQL BEGIN DECLARE SECTION;
        long seq;
        VARCHAR writer[20+1];
        VARCHAR regno[24+1];
        VARCHAR subject[20+1];
        VARCHAR crdate[20+1];
    EXEC SQL END DECLARE SECTION;

    EXEC SQL DECLARE c_plnSelOne CURSOR FOR
        SELECT seq, writer, regno, subject, to_char(crdate, 'YYYY-MM-DDHH24MISS') crdate 
        FROM zcube_zsource ;

    EXEC SQL OPEN c_plnSelOne;

    EXEC SQL WHENEVER NOT FOUND DO break;
    while(1)
    {
	    memset(&writer, 0x00, sizeof(writer));
        memset(&regno, 0x00, sizeof(regno));
        memset(&subject, 0x00, sizeof(subject));
        memset(&crdate, 0x00, sizeof(crdate));

        EXEC SQL FETCH c_plnSelOne INTO
            :seq,
            :writer,
            :regno,
            :subject,
			:crdate ;

        if (sqlca.sqlcode != 0) {
            printf("<<< CubeLog(!0) :: sqlca.sqlcode = [%d]\n", sqlca.sqlcode);
            printf("<<< CubeLog(!0) :: %s\n", sqlca.sqlerrm.sqlerrmc);
            EXEC SQL CLOSE c_plnSelOne;
            exit(-1);
        }

        if(++nRownum%1000 == 10) break;    

        printf ("%ld||%s||%s||%s||%s\n" , seq, writer.arr, regno.arr, subject.arr, crdate.arr);

    }

    printf ("--------------------------------------------------------------------------------------------\n\n\n");
    
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL CLOSE c_plnSelOne;

}


void decSelOne() {

    printf("************************************************\n");
    printf("****** CubeOneAPI Decrypt One Select  ********\n");
    printf("************************************************\n\n");

    int nRownum = 0;

    EXEC SQL WHENEVER SQLERROR DO sql_error("<<< call : sql_error => targetInsLoop");

    EXEC SQL BEGIN DECLARE SECTION;
        long seq;
        VARCHAR writer[20+1];
        VARCHAR regno[24+1];
        VARCHAR subject[20+1];
        VARCHAR crdate[20+1];
    EXEC SQL END DECLARE SECTION;

    EXEC SQL DECLARE C_DECSEL CURSOR FOR
        SELECT seq, writer, regno, subject, crdate 
        FROM zcube_ztarget ;

    EXEC SQL OPEN C_DECSEL;

    EXEC SQL WHENEVER NOT FOUND DO break;
    while(1)
    {
	    memset(&writer, 0x00, sizeof(writer));
        memset(&regno, 0x00, sizeof(regno));
        memset(&subject, 0x00, sizeof(subject));
        memset(&crdate, 0x00, sizeof(crdate));

        EXEC SQL FETCH C_DECSEL INTO
            :seq,
            :writer,
            :regno,
            :subject,
			:crdate ;

        if (sqlca.sqlcode != 0) {
            printf("<<< CubeLog(!0) :: sqlca.sqlcode = [%d]\n", sqlca.sqlcode);
            printf("<<< CubeLog(!0) :: %s\n", sqlca.sqlerrm.sqlerrmc);
            EXEC SQL CLOSE C_DECSEL;
            exit(-1);
        }

        if(++nRownum%1000 == 10) break;    

        CO_dec_char(regno.arr, regno.len,  sItem, 10, NULL, NULL, sDecOut);

        if (nRtn == CTR_SUCCESS) {
            // printf ("<<< CubeLog :: strlen(encrypt) = %d,%d \n" , strlen(sEncOut), nEncLen ); 
        }
        else {
            printf("<<< CubeLog :: insertEncTable() : Failed Encryption data with return [%d].\n",nRtn);
        }

        printf ("%ld||%s||%s||%s||%s||%s\n" , seq, writer.arr, regno.arr, sDecOut, subject.arr, crdate.arr);

    }

    printf ("--------------------------------------------------------------------------------------------\n\n\n");
    
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL CLOSE C_DECSEL;

}
