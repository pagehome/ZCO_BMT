/*
20007    No Privileges to access encrypted column    COER_NOTALLOWEDS
20008    Item is not specified                       COER_NOITEM_ENTEREDS
20009    Fail to get OCI Environment                 COER_FAIL_GET_OCIENVS
20010    Fail to Enabling Lob Buffering              COER_FAIL_ENABLE_BUFFERINGS
20011    Fail to treat Lob data                      COER_FAIL_LOBS
20012    Fail to Decrypt Lob data                    COER_FAIL_DEC_LOBS
20013    Fail to Encrypt Lob data                    COER_FAIL_ENC_LOBS
20014    Fail to Encryption data                     COER_FAIL_ENCRYPTIONS
20015    Fail to Encryption self testing             COER_FAIL_SELFTESTS
20016    Fatal error so should exception             COER_FATAL_ERROR
20017    error when check Initialize.                COER_FAIL_INIT
20018    error when check double enc.                COER_DOUBLE_CHECK

20021    error when SHMOpen file open.               COER_SHMFILEOPEN
20022    error when SHMOpen ftok.                    COER_SHMFTOK
20023    error when SHMOpen shmget.                  COER_SHMGETNORMAL
20024    error when SHMOpen shmget ENPSPC.           COER_SHMGETNOSPC
20025    error when SHMOpen shmget ENOMEM.           COER_SHMGETNOMEM
20031    error when shmat EMFILE.                    COER_SHMATEMFILE
20032    error when shmat ENOMEM.                    COER_SHMATENOMEM
20033    error when shmat EINVAL.                    COER_SHMATEINVAL
20034    error for Admin Act.: Ver 2.5-9021-C        COER_ADMINACTION
*/

import java.io.*;
import java.text.*;
import com.cubeone.*;
import java.util.*;

public class co_fopen {
    //static String plain = "" ;
    //static String plain = "";
    static String plain = "1234567890123";
    //static String plain = "" ;
    static String encrypt = "" ;
    static String decrypt = "" ;
    static String item = "AES256" ;

    static byte[] errbyte = new byte[5];

    public static void main(String[] args) throws Exception {

        System.out.println("########################################################");
        System.out.println("#########  CubeOneAPI-JAVA Self Test Program ###########");
        System.out.println("########################################################\n");

        property();

        //nRtn = CO_init (bFirst, sSid, sUser, sNull, sNull, sNull, sNull, sNull, sNull, sNull, nSessionId);
        //                                        ip Machine OsUser Program Module Terminal Psswd SeesionId 
        //CubeOneAPI.coinit ("API");
        //CubeOneAPI.jcoinit ("API");
           
        //Test basic API 
//BufferedReader br = null;
for( int i = 0; i < 300000; i++ )
{
    String currentLine;
    BufferedReader br = new BufferedReader(new FileReader("r.sh"));
}
        CubeOneAPI.coinit (1, "API", "cubeapi", "","","","","","","",100);
	basic();

	System.in.read();

    }

    static void basic() {

        System.out.println("####################################" );
        System.out.println("#### Basic-Test :: start ..... !!!" );
        System.out.println("####################################" );

        System.out.println("\n<<< CubeLog :: ITEM = [" + item + "]");

        System.out.println("\n[1] Plain Test  ");

        System.out.println("<<< CubeLog :: plain = [" + plain + "]");
        System.out.println("<<< CubeLog :: plain.length() = [" + plain.length()+ "]");

        System.out.println("\n[2] Enc Test ");

        encrypt = CubeOneAPI.coencchar(plain,item,11,null,null,errbyte);

        System.out.println("<<< CubeLog :: encrypt = [" + encrypt + "]");
        System.out.println("<<< CubeLog :: errbyte = [" + new String(errbyte) + "]");
 //       System.out.println("<<< CubeLog :: encrypt.length() = [" + encrypt.length()+ "]");

        /********************************************************************************/
        /********************************************************************************/
/*
        System.out.println("\n[3] Dec Test ");

        decrypt = CubeOneAPI.codecchar(encrypt,item,11,null,null,errbyte);

        System.out.println("<<< CubeLog :: decrypt = [" + decrypt + "]");
        System.out.println("<<< CubeLog :: errbyte = [" + new String(errbyte) + "]");
        System.out.println("<<< CubeLog :: decrypt.length() = [" +decrypt.length() + "]");
*/
        System.out.println("\n#### Basic-Test :: Success..... !!!\n\n" );

    }
    
    static void property(){

        System.out.println("####################################" );
        System.out.println("#### Get JVM Property ..... !!!" );
        System.out.println("####################################" );

        Properties sysprops = System.getProperties();

        String key, value ;

        for (Enumeration e = sysprops.propertyNames(); e.hasMoreElements();) {
            key = (String) e.nextElement();
            value = sysprops.getProperty(key);
            
            if(key.equals("java.ext.dirs") || 
                key.equals("java.library.path") ||  
                key.equals("sun.arch.data.model") ||  
                key.equals("java.class.path") ||  
                key.equals("java.home") || 
                key.equals("java.runtime.version") || 
                key.equals("java.version") || 
                key.equals("sun.boot.library.path") || 
                key.equals("os.arch") || 
                key.equals("user.name") || 
                key.equals("file.encoding") || 
                key.equals("user.language") || 
                key.equals("")) 
            {
                System.out.println(key + "=" + value);
            }
        }
        System.out.println("\n\n");
    }
}

